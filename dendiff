#!/usr/bin/perl -w 
#Patrick Lestrange

use strict;
use Tie::File;
use POSIX;

=head1 NAME

Den-Diff

=head1 DESCRIPTION

This program sifts through a Gaussian output file from a RT-HF or RT-DFT 
calculation. It generates several .fchk and .cube files for the density 
differences. 

=head1 EXAMPLES

'dendiff -f file1.fchk file2.log' (make all the .fchk files - file2-#.fchk)

'dendiff -f file1.fchk file2.log' (make all the .fchk files - file2-#.fchk)


=head1 VERSION

0.0.1

=head1 AUTHOR

Patrick J Lestrange, E<lt>plestran@uw.eduE<gt>

=cut

our $version = "0.0.1";
our ($norb,$ntt,$logfile,$fchk,$alpha_e,$beta_e);
our (%alpha_den,%beta_den,%total_den,@time,$nden);
our $cube_flag = 0;
our $fchk_flag = 0;

##################
## Main Program ##
##################

if ( !$ARGV[0] ){ 
	system('perldoc dendiff'); }
else { 
	parse(@ARGV); 
	if ($fchk_flag) {
    search_logfile();
    mk_files(); }
	}

#################
## Subroutines ##
#################

sub error {

		print "Unable to interpret input.\n";
		print "Try running 'dendiff -h' to see the help screen\n";

}

sub mk_files {

  my (@string,@lines,@formatted);
  my ($nfchk,$new_fchk,$basename,$cube);
  my ($div5,$mod5,$iend,$ind);
  @string = split /\./, $logfile;
	$basename = $string[0];

  for (my $i = 0; $i < $nden; $i++) {

    $mod5 = $ntt % 5;
    $div5 = floor($ntt/5);
    $nfchk = $i+1;

		print "Working on fchk #$nfchk\n";
    $new_fchk = "$basename-$nfchk.fchk";  
    system (`cp $fchk $new_fchk`);   
		tie @lines, 'Tie::File', $new_fchk, recsep => "\n";
    for (my $j = 0; $j <= $#lines; $j++){
      if ($lines[$j] =~ /Total SCF Density/ )  {
        $iend = $div5 + $j;
        for (my $k = $j+1; $k <= $iend; $k++) {
          $lines[$k] = ();
          $ind = 5*($k - ($j+1));
          #format the print statement
          for (my $l = 0; $l < 5; $l++){
            if ($total_den{$i}[$ind+$l] < 0) {
              $formatted[$l] = sprintf(" %.8E", $total_den{$i}[$ind+$l]); }
            else {
              $formatted[$l] = sprintf("  %.8E", $total_den{$i}[$ind+$l]); } 
            $lines[$k] .= $formatted[$l]; }
          $lines[$k] .= "\n";
          }
        if ($mod5 != 0) {
          $lines[$iend+1] = ();
          $ind = $ntt-$mod5;
          for (my $l = 0; $l < $mod5; $l++){
            if ($total_den{$i}[$ind+$l] < 0) {
              $formatted[$l] = sprintf(" %.8E", $total_den{$i}[$ind+$l]); }
            else {
              $formatted[$l] = sprintf("  %.8E", $total_den{$i}[$ind+$l]); } 
            $lines[$iend+1] .= $formatted[$l]; }
          $lines[$iend+1] .= "\n";
          } #end mod5
        }
      } #end file search
		untie @lines;

    if ($cube_flag) {
      $cube = "$basename-density-$nfchk.cube";  
      print "Working on cube #$nfchk\n\n";
    	system(`cubegen 0 density $new_fchk $cube`); 
      }

    }

}

sub parse {

	my @inp = @_;

  if ($inp[0] =~ /[fc]/) {
		if ($inp[0] =~ /f/) { $fchk_flag  = 1; }
		if ($inp[0] =~ /c/) { $cube_flag= 1;
      if ($inp[0] !~ /f/) { error(); die; } }
 		if ($#inp < 2) { error(); die; }
		else {
			if ($inp[1] =~ /.fchk/){ $fchk= $inp[1]; }
			else { error(); }
			if ($inp[2] =~ /.log/){ $logfile= $inp[2]; }
			else { error(); }
			}
		}
  elsif ($inp[0] =~ /-h/) { system('perldoc dendiff'); } 
  else { error(); }    

#	if ($inp[0] =~ /.fchk/){ $fchk = $inp[0]; 
#    if ($inp[1] =~ /.log/) { $logfile = $inp[1]; } 
#    else { error(); }
#    }
#	elsif ($inp[0] =~ /-h/){ system('perldoc dendiff'); } 
#	else { error(); }

#  print "fchk = $fchk\n";
#  print "log  = $logfile\n";

}

sub search_logfile {

  my @string;

	open(IN, '<', $logfile) or die "Can't read input file: $!\n"; 
	while (<IN>) { 

    if (/primitive/) {
			@string = split /\s+/;
#			for (my $i = 0; $i <= $#string; $i++){ print "$string[$i]\n"; }
      $norb = $string[1];
      $ntt = ($norb*($norb+1))/2; }

    }
	close IN;

  my $nalpha = -1;
  my $nbeta  = -1;
	$/ = ""; # paragraph mode
	open(IN, '<', $logfile) or die "Can't read input file: $!\n"; 
	while (<IN>) { 

    # get the alpha density differences
    if (/density difference/ and /A/) {
      $nalpha += 1;
			@string = split /\s*\s\s*/; 
			for (my $i = 5; $i <= $#string; $i++){ push (@{$alpha_den{$nalpha}}, $string[$i]); }
      }

    # get the beta density differences
    if (/density difference/ and /B/) {
      $nbeta+= 1;
			@string = split /\s*\s\s*/; 
			for (my $i = 5; $i <= $#string; $i++){ push (@{$beta_den{$nalpha}}, $string[$i]); }
      }

    }
	close IN;

  my $dendim = $#{$alpha_den{0}}+1;
  if ($nalpha != $nbeta) {
    print "Found a different number of alpha and beta densities.\n";
    print "Unable to proceed.\n";
    die; }
  elsif ($ntt != $dendim) {
    print "Upper triangular density doesn't equal NTT\n";
    print "Density dimension = $dendim\n";
    print "NTT               = $ntt\n"; }
  $nden = $nalpha;

#  print "Alpha Densities\n";
#  for (my $i = 0; $i < $ntt; $i++){ 
#    for (my $j = 0; $j < $nalpha; $j++){ 
#      print "$alpha_den{$j}[$i]\t"; }
#    print "\n"; }
#  print "Beta Densities\n";
#  for (my $i = 0; $i < $ntt; $i++){ 
#    for (my $j = 0; $j < $nbeta; $j++){ 
#      print "$beta_den{$j}[$i]\t"; }
#    print "\n"; }

# Makde the total density difference
  for (my $i = 0; $i < $ntt; $i++){ 
    for (my $j = 0; $j < $nalpha; $j++){ 
      $total_den{$j}[$i] = $alpha_den{$j}[$i] + $beta_den{$j}[$i]; } }

#  print "Total Density\n";
#  for (my $i = 0; $i < $ntt; $i++){ 
#    for (my $j = 0; $j < $nalpha; $j++){ 
#      print "$total_den{$j}[$i]\t"; }
#    print "\n"; }


}

