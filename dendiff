#!/usr/bin/perl -w 
#Patrick Lestrange

use strict;
use POSIX;

=head1 NAME

Den-Diff

=head1 DESCRIPTION

This program sifts through a Gaussian output file from a RT-HF or RT-DFT 
calculation. It generates several .fchk and .cube files for the density 
differences. 

=head1 EXAMPLES

'dendiff 1 file1.fchk file2.log' (make all the .fchk/cube files)

'dendiff 5 file1.fchk file2.log' (make every 5th step)

=head1 VERSION

0.0.2

=head1 AUTHOR

Patrick J Lestrange, E<lt>plestran@uw.eduE<gt>

=cut

our $version = "0.0.3";
our ($norb,$ntt,$logfile,$fchk,$alpha_e,$beta_e);
our (@alpha_den,@beta_den,@total_den,@fchk_den);
our ($nden,$step,$istart,$iend,$div5,$mod5);

##################
## Main Program ##
##################

if ( !$ARGV[0] ){ 
	system('perldoc dendiff'); }
else { 
	parse(@ARGV);
  search_logfile();
  search_fchk(); 
  mk_files(); 
  system (`rm tmp*`); 
  }

#################
## Subroutines ##
#################

sub error {

		print "Unable to interpret input.\n";
		print "Try running 'dendiff -h' to see the help screen\n";

}

sub mk_files {

  my (@string,@lines,@formatted,@den_string);
  my ($nfchk,$new_fchk,$basename,$cube,$tmp_file);
  my ($index);
  @string = split /\./, $logfile;
	$basename = $string[0];
  my $nstep = floor($nden/$step);

  for (my $i = 0; $i <= $nstep+1; $i++) {
    $nfchk = $i*$step;
    if ($i == $nstep+1) { $nfchk = $nden; }  
 
#   read alpha/beta densities 
	  $/ = ""; 
    @alpha_den = ();
    @beta_den  = ();
    $tmp_file = "tmp-$nfchk.txt";
    open (IN, '<', $tmp_file) or die "Can't read input tmp-file: $!\n"; 
    while (<IN>) {
      if (/Electron density/ and /A/) {
  			@string = split /\s*\s\s*/; 
   			for (my $i = 4; $i <= $#string; $i++){ push (@alpha_den,$string[$i]); } }
      print "\n";
      if (/Electron density/ and /B/) {
  			@string = split /\s*\s\s*/; 
  			for (my $i = 4; $i <= $#string; $i++){ push (@beta_den,$string[$i]); } } }
  	close IN;
#    print "Alpha = @alpha_den\n";
#    print "Beta  = @beta_den\n";

#   form the total density string
    @den_string= map { "" } 1..($div5+1);
    for (my $i = 0; $i < $ntt; $i++){
      $total_den[$i] = $fchk_den[$i] - ($alpha_den[$i] + $beta_den[$i]); }
    for (my $i = 0; $i < $div5; $i++){
      for (my $j = 0; $j < 5; $j++){
        $index = 5*$i+$j;
        if ($total_den[$index] < 0) {
          $formatted[$j] = sprintf(" %.8E", $total_den[$index]); }
        else {
          $formatted[$j] = sprintf("  %.8E", $total_den[$index]); } 
        $den_string[$i] .= $formatted[$j]; }
      $den_string[$i] .= "\n"; }
    if ($mod5 != 0) {
      for (my $i = 0; $i < $mod5; $i++){
        $index = 5*$div5+$i;
        if ($total_den[$index] < 0) {
          $formatted[$i] = sprintf(" %.8E", $total_den[$index]); }
        else {
          $formatted[$i] = sprintf("  %.8E", $total_den[$index]); } 
        $den_string[$div5] .= $formatted[$i]; }
      $den_string[$div5] .= "\n"; }
    print "Total Density Difference\n";
    print @den_string;

#   form the new fchk file
    $new_fchk = "$basename-$nfchk.fchk";  
		print "Working on fchk #$nfchk: $new_fchk\n";
    $index = 0;
	  $/ = "\n"; 
    open (IN,  '<', $fchk) or die "Can't read input fchk-file: $!\n"; 
    open (OUT, '>', $new_fchk) or die "Can't read output fchk-file: $!\n"; 
    while (<IN>) {
      print;
      if ($. < $istart or $. > $iend) { 
        print OUT; }
      else {
        print $den_string[$index];
        print OUT $den_string[$index];
        $index += 1;
        print "index = $index\n"; } }
    close IN;
    close OUT;

#   form the cube file
    $cube = "$basename-density-$nfchk.cube";
    print "Working on cube #$nfchk: $cube\n\n";
    system(`cubegen 0 density $new_fchk $cube`);
  	system(`rm $tmp_file`);
#  	system(`rm $new_fchk`);

    }

}

sub parse {

	my @inp = @_;

  if ($inp[0] =~/[0-9]/){
    $step = $inp[0];
    print "Making cube files for every $step steps.\n"; }
    if ($inp[1] =~ /.fchk/) {
 	  	if ($#inp < 2) { error(); die; }
	  	else {
	  		if ($inp[1] =~ /.fchk/){ $fchk= $inp[1]; }
	  		else { error(); }
	  		if ($inp[2] =~ /.log/){ $logfile= $inp[2]; }
	  		else { error(); } } }
  elsif ($inp[0] =~ /[h]/) { system('perldoc dendiff'); } 
  else { error(); }    

}

sub search_fchk {

  my (@string);

# find where to place the density
	$/ = "\n"; 
  open (IN,  '<', $fchk) or die "Can't read input fchk-file: $!\n"; 
  while (<IN>) { if (/Total SCF Density/){ $istart = $.+1; } }
  close IN;
  $iend = $istart + $div5 - 1;
  if ($mod5 != 0) { $iend += 1; }
  print "start = $istart\n";
  print "end   = $iend\n";

	open(IN, '<', $fchk) or die "Can't read input fchk-file: $!\n"; 
	while (<IN>) { 
    if ($. >= $istart and $. <= $iend) {
  		@string = split /\s*\s\s*/; 
      chomp(@string);
     	for (my $i = 1; $i <= $#string; $i++){ push (@fchk_den,$string[$i]); } } }
  close IN;

}

sub search_logfile {

  my (@string,$tmp_file);

# find number of basis functions
	open(IN, '<', $logfile) or die "Can't read input log-file: $!\n"; 
	while (<IN>) { 
    if (/primitive/) {
			@string = split /\s+/;
#			for (my $i = 0; $i <= $#string; $i++){ print "$string[$i]\n"; }
      $norb = $string[1];
      $ntt = ($norb*($norb+1))/2; } }
	close IN;
  $mod5 = $ntt % 5;
  $div5 = floor($ntt/5);

  my $nalpha = -1;
  my $nbeta  = -1;
	$/ = ""; # paragraph mode
	open(IN, '<', $logfile) or die "Can't read input log-file: $!\n"; 
	while (<IN>) { 

    # get the alpha density differences
    if (/Electron density/ and /A/) {
      @alpha_den = ();
      $nalpha += 1;
			@string = split /\s*\s\s*/; 
      $tmp_file = "tmp-$nalpha.txt";
      print "Making tmp file: $tmp_file\n";
      open (OUT, '>', $tmp_file) or die "Can't open tmp-file: $!\n"; 
      print OUT;
      close OUT; }

    # get the beta density differences
    if (/Electron density/ and /B/) {
#      print "Beta found!\n";
      @beta_den= ();
      $nbeta+= 1;
			@string = split /\s*\s\s*/; 
      $tmp_file = "tmp-$nbeta.txt";
      open (OUT, '>>', $tmp_file) or die "Can't open tmp-file: $!\n"; 
      print OUT;
      close OUT; }

    }
	close IN;
  print "\n";

  if ($nalpha != $nbeta) {
    print "Found a different number of alpha and beta densities.\n";
    print "Unable to proceed.\n";
    die; }
  $nden = $nalpha;

# Make the total density difference
#  for (my $i = 0; $i < $ntt; $i++){ 
#    for (my $j = 0; $j < $nalpha; $j++){ 
#      $total_den{$j}[$i] = $alpha_den{$j}[$i] + $beta_den{$j}[$i]; } }

}

